{"version":3,"sources":["components/WorldsPreview.js","components/Header.js","img/twitter.svg","img/opensea.svg","components/Nav.js","components/Definition.js","components/Info.js","components/Quotes.js","img/github.svg","img/etherscan-logo-circle.svg","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["worldsAddress","tokenURIHeaderLength","length","WorldsPreview","props","initialTokenId","Math","floor","random","useState","tokenId","setTokenId","imageURI","setImageURI","claimed","setClaimed","getTokenURI","useCallback","a","window","ethereum","requestAccount","provider","ethers","providers","Web3Provider","signer","getSigner","contract","Contract","Worlds","abi","tokenURI","tokenJSON","Buffer","from","substring","JSON","parse","getOwner","console","log","ownerOf","ownerAddress","displaySystem","owner","image","request","method","claim","transaction","wait","useEffect","className","style","position","alt","src","onClick","onChange","e","parseInt","target","value","Header","Nav","href","Twitter","width","margin","display","OpenSea","Definition","fontSize","Info","marginBottom","quotes","Quotes","quoteIndex","setQuoteIndex","fade","fadeProp","setFadeProp","timeout","setInterval","clearInterval","Footer","GitHub","Etherscan","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd4e9100.chunk.js","sourcesContent":["import '../App.scss';\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport Worlds from '../artifacts/contracts/Worlds.sol/Worlds.json';\n\nconst worldsAddress = '0x1Fc3e820AA7368f9Dde7B84758Dd208123159Ad6';\nconst tokenURIHeaderLength = 'data:application/json;base64,'.length;\n\nfunction WorldsPreview(props) {\n  const initialTokenId = Math.floor(Math.random() * 10000) + 1;\n  const [tokenId, setTokenId] = useState(initialTokenId);\n  const [imageURI, setImageURI] = useState(null);\n  const [claimed, setClaimed] = useState(false);\n\n  const getTokenURI = useCallback(async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(worldsAddress, Worlds.abi, signer);\n      const tokenURI = await contract.tokenURI(tokenId);\n      const tokenJSON = Buffer.from(\n        tokenURI.substring(tokenURIHeaderLength),\n        'base64'\n      );\n      return await JSON.parse(tokenJSON);\n    }\n  }, [tokenId]);\n\n  const getOwner = useCallback(async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(worldsAddress, Worlds.abi, signer);\n      console.log(`Looking up owner of tokenId: ${tokenId}`);\n      try {\n        const ownerAddress = await contract.ownerOf(tokenId);\n        return ownerAddress;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [tokenId]);\n\n  const displaySystem = useCallback(async () => {\n    const tokenURI = await getTokenURI(tokenId);\n    const owner = await getOwner();\n    setClaimed(owner ? true : false);\n    setImageURI(tokenURI.image);\n  }, [getOwner, getTokenURI, tokenId]);\n\n  useEffect(() => {\n    if (tokenId && tokenId > 0 && tokenId <= 10000) {\n      displaySystem();\n    }\n  }, [displaySystem, tokenId]);\n\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  async function claim() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(worldsAddress, Worlds.abi, signer);\n      console.log(`Attempting to claim tokenId: ${tokenId}`);\n      const transaction = await contract.claim(tokenId);\n      await transaction.wait();\n      console.log(transaction);\n    }\n  }\n\n  function renderBadge() {\n    if (claimed) {\n      return <span className=\"claimedBadge badge-top-right\"></span>;\n    } else {\n      return <span className=\"unclaimedBadge badge-top-right\"></span>;\n    }\n  }\n\n  function renderWorlds() {\n    if (imageURI) {\n      return (\n        <div style={{ position: 'relative' }}>\n          <img\n            alt=\"Rendered Worlds\"\n            src={`${imageURI}`}\n            className=\"WorldsImage\"\n          />\n          {renderBadge()}\n        </div>\n      );\n    } else {\n      return <div className=\"WorldsImage\" />;\n    }\n  }\n\n  function showNext() {\n    if (tokenId < 10000) {\n      setTokenId(tokenId + 1);\n    }\n  }\n\n  function showPrevious() {\n    if (tokenId > 1) {\n      setTokenId(tokenId - 1);\n    }\n  }\n\n  return (\n    <div className=\"WorldsPreview\">\n      {renderWorlds()}\n      <div className=\"Controls\">\n        <button className=\"NavButton\" onClick={showPrevious}>\n          &#x3c;\n        </button>\n        <input\n          className=\"Input\"\n          onChange={(e) => setTokenId(parseInt(e.target.value) || '')}\n          value={tokenId}\n        />\n        <button className=\"NavButton\" onClick={showNext}>\n          &#x3e;\n        </button>\n      </div>\n      <button className=\"ClaimButton\" onClick={claim}>\n        Claim\n      </button>\n    </div>\n  );\n}\n\nexport default WorldsPreview;\n","import '../App.scss';\n\nfunction Header(props) {\n  return (\n    <div className=\"Header\">\n      <h2>Worlds</h2>\n      <div>\n        <p className=\"TextBlock\">\n          Worlds is randomly generated, often inhabited, or once inhabited,\n          planetary star systems created and stored on chain. Stats, images, and\n          other functionality are intentionally omitted for others to interpret.\n          Feel free to use Worlds in any way you want.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/twitter.4c5d7370.svg\";","export default __webpack_public_path__ + \"static/media/opensea.575f244c.svg\";","import '../App.scss';\nimport Twitter from '../img/twitter.svg';\nimport OpenSea from '../img/opensea.svg';\n\nfunction Nav(props) {\n  return (\n    <div className=\"Nav\">\n      <div>\n        <a href=\"https://twitter.com/AGalaxyOfLoot\">\n          <img\n            alt=\"Twitter Logo\"\n            src={Twitter}\n            style={{\n              width: 36,\n              margin: '20px 10px',\n              display: 'inline-block',\n            }}\n          />\n        </a>\n        <a href=\"https://opensea.io/collection/worldsproject\">\n          <img\n            alt=\"OpenSea Logo\"\n            src={OpenSea}\n            style={{\n              width: 36,\n              margin: '20px 10px',\n              display: 'inline-block',\n            }}\n          />\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import '../App.scss';\n\nfunction Definition(props) {\n  return (\n    <div className=\"Definition\">\n      <p>\n        <b>world</b>: <em style={{ fontSize: 18 }}>/wərld/</em> <br />{' '}\n        <em style={{ fontSize: 16 }}>noun</em> <br /> a planet, moon, or\n        civilization-scale engineered habitat\n      </p>\n    </div>\n  );\n}\n\nexport default Definition;\n","import '../App.scss';\n\nfunction Info(props) {\n  return (\n    <div className=\"Info\">\n      <p style={{ marginBottom: 10 }}>Begin your journey of discovery</p>\n      <p style={{ fontSize: '1.8rem', marginBottom: 10 }}>\n        <b>Claim a star system</b>\n      </p>\n      <p style={{ marginBottom: 10 }}>No fees. Just gas.</p>\n      <p className=\"TextBlock\">\n        10,000 star systems, each with a story to tell. Who inhabits these\n        strange and varied environments? What riches and mysteries do they hold?\n        Who, if any, are these worlds beholden to? Why have some worlds been\n        abandoned?\n      </p>\n    </div>\n  );\n}\n\nexport default Info;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.scss';\n\nconst quotes = [\n  'What mysteries might we uncover in the dark, ruinous depths of an alien civilization on a Hydrocarbon Ocean World?',\n\n  'What do we not yet understand about this universe that could possibly explain a civilization sustained on a Chthonian planet?',\n\n  'What might an advanced alien species inhabiting a Super Massive Type III Gas Giant have to teach us?',\n\n  'What percentage of Ring World inhabitants go on exotic vacations to nearby planets and moons?',\n\n  'What histories might exist in a system where all the moons and planets are abandoned, but civilization flourishes in a Shellworld?',\n\n  'Who built the Abandoned Dyson Sphere? What happened to them? Did they have to empty more than just their own system of planets and moons to have the raw materials to build it?',\n\n  'What led to the ruin of these abandoned worlds? War? Famine? Exponential tech? The promise of a better life elsewhere in the galaxy?',\n\n  'What explains a system of inhabited worlds of fundamentally different environments? Did one species bend each of the worlds to their will? Did they adapt their biology? Multiple immigration events? Diverse panspermia and parallel evolution?',\n\n  'Could we, from this Hot Terrestrial paradise, visit friends beneath the frigid surface of an H2O Ice World?',\n\n  'How long did life sustain on the ancient, abandoned Desert World?',\n];\n\nfunction Quotes(props) {\n  const [quoteIndex, setQuoteIndex] = useState(\n    Math.floor(Math.random() * quotes.length)\n  );\n\n  const [fadeProp, setFadeProp] = useState({\n    fade: 'fade-in QuoteBlock',\n  });\n\n  useEffect(() => {\n    const timeout = setInterval(\n      () => {\n        if (fadeProp.fade === 'fade-in QuoteBlock') {\n          setFadeProp({\n            fade: 'fade-out QuoteBlock',\n          });\n        } else {\n          setQuoteIndex(Math.floor(Math.random() * quotes.length));\n          setFadeProp({\n            fade: 'fade-in QuoteBlock',\n          });\n        }\n      },\n      fadeProp.fade === 'fade-in QuoteBlock' ? 10000 : 1000\n    );\n\n    return () => clearInterval(timeout);\n  }, [fadeProp]);\n\n  function getQuote() {\n    return quotes[quoteIndex];\n  }\n\n  return (\n    <div className=\"Quotes\">\n      <p className={fadeProp.fade}>{getQuote()}</p>\n    </div>\n  );\n}\n\nQuotes.propTypes = {\n  text: PropTypes.string,\n};\n\nexport default Quotes;\n","export default __webpack_public_path__ + \"static/media/github.7ba8eebb.svg\";","export default __webpack_public_path__ + \"static/media/etherscan-logo-circle.66d539f5.svg\";","import '../App.scss';\nimport GitHub from '../img/github.svg';\nimport Etherscan from '../img/etherscan-logo-circle.svg';\n\nfunction Footer(props) {\n  return (\n    <div className=\"Footer\">\n      <div>\n        <a href=\"https://github.com/jj0b/worlds-project\">\n          <img\n            alt=\"GitHub Logo\"\n            src={GitHub}\n            style={{\n              width: 36,\n              margin: '20px 10px',\n              display: 'inline-block',\n            }}\n          />\n        </a>\n        <a href=\"https://etherscan.io/address/0x1Fc3e820AA7368f9Dde7B84758Dd208123159Ad6\">\n          <img\n            alt=\"Etherscan Logo\"\n            src={Etherscan}\n            style={{\n              width: 36,\n              margin: '20px 10px',\n              display: 'inline-block',\n            }}\n          />\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import './App.scss';\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport Definition from './components/Definition';\nimport Info from './components/Info';\nimport WorldsPreview from './components/WorldsPreview';\nimport Quotes from './components/Quotes';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Nav />\n      <Definition />\n      <Info />\n      <WorldsPreview />\n      <Quotes />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}